{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAiBhD,OACE,8BACE,sBAAMC,SAZW,SAACC,GACpBA,EAAEC,iBACFC,QAAQC,IAAIN,GAERA,EAAWO,OAAOC,OAAS,IAC7BV,GAAc,SAAAW,GAAI,OAAKT,GAAL,mBAAoBS,OACtCR,EAAc,MAMd,SACE,uBAAOS,KAAK,OAAOC,MAAOX,EAAYY,SAjBlB,SAACT,GACzBF,EAAcE,EAAEU,OAAOF,e,+BCNdG,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACbC,EADa,0FAC4EC,UAAUH,GADtF,sBAGWI,MAAMF,GAHjB,8BAGuBG,OAHvB,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QATnB,kBAaZK,GAbY,2CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACnC,OACE,sBAAKa,UAAU,yCAAf,UACE,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCFGO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EACdhB,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRvB,EAAQC,GAAUuB,MAAK,SAACC,GAAD,OACrBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACnB,IAEGoB,EDdmBK,CAAazB,GAA/BM,EAD+B,EAC/BA,KAAMa,EADyB,EACzBA,QAMd,OAJA7B,QAAQC,IAAIe,GAKV,qCACGa,GAAW,mBAAGJ,UAAU,mCAAb,wBACZ,6BAAKf,IAEL,qBAAKe,UAAU,YAAf,SACGT,EAAKE,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEKjBgB,EAnBM,WAAO,IAAD,EACW1C,mBAAS,CAAC,gBADrB,mBAClB2C,EADkB,KACN5C,EADM,KAGzB,OACE,gCACE,8CACA,uBAEA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,6BACG4C,EAAWnB,KAAI,SAACR,EAAU4B,GAAX,OACd,cAAC,EAAD,CAAiB5B,SAAUA,GAAb4B,Y,MCVxBC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.f27fcf57.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(inputValue);\n\n    if (inputValue.trim().length > 2) {\n      setCategories(cats => [inputValue, ...cats]); // calls previous state and adds the new value\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n      </form>\n    </div>\n  );\n};\n","export const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=ffjqnggDTbKdsTc7E322wcfsFeYQEjkb&q=${encodeURI(category)}&limit=10`;\n\n    const { data } = await (await fetch(url)).json();\n\n    const gifs = data.map((img) => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images?.downsized_medium.url,\n      };\n    });\n\n    return gifs;\n  };","import React from \"react\";\n\nexport const GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title}></img>\n      <p>{title}</p>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n  const { data, loading } = useFetchGifs(category);\n\n  console.log(data);\n\n  /**/\n\n  return (\n    <>\n      {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n      <h4>{category}</h4>\n\n      <div className=\"card-grid\">\n        {data.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\n\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) =>\n      setState({\n        data: imgs,\n        loading: false,\n      })\n    );\n  }, [category]);\n\n  return state;\n};\n","import React, { useState} from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"Dragon Ball\"]);\n\n  return (\n    <div>\n      <h2>GifExpertApp</h2>\n      <hr />\n\n      <AddCategory setCategories={setCategories} />\n\n      <ol>\n        {categories.map((category, i) => (  \n          <GifGrid key={i} category={category} />\n        ))}\n      </ol>\n    </div>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n\n"],"sourceRoot":""}